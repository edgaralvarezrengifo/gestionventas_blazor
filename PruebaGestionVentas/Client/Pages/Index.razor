@page "/"
@page "/productos"

@inject IRepository repository
@inject IToastService toastService

<div>
    <h3>Productos</h3>
    <ProductList Products="Products" OnValidSubmit="@showedit" />
    <div class="form-group">
        <div class="col-md-3" style="padding-left:0px;">

            <Pagination ActualPage="actualpage" TotalPages="totalpages" SelectedPage="selectedpage" />
        </div>
    </div>
</div>



@if (isnew && id == 0)
{
<br />
    <div class="form-group">
        <ProductForm OnValidSubmit="AddServiceProvider" newProduct="newProduct" option="Create"></ProductForm>
    </div>
 }

else
{
    <button class="btn btn-outline-info" @onclick="shownew">Add Producto</button>
    <br />
}

@if (id != 0)
{
    <br />
    <ProductForm OnValidSubmit="EditServiceProvider" newProduct="newProduct" option="Edit"></ProductForm>
}



@code { private bool isnew;

private bool isedit;

int id = 0;
private ProductDTO newProduct = new ProductDTO();
private List<ProductDTO> Products;

protected async override Task OnInitializedAsync()
{

await LoadData(1);
isnew = false;
isedit = false;
}

private async Task LoadData(int page)
{

                        var responsehttp = await repository.Get<List<ProductDTO>>($"api/Productos?page={page}");
                        if (!responsehttp.Error)
                        {
                            Products = responsehttp.Response;
                            var count = responsehttp.HttpResponseMessage.Headers.GetValues("countrecords").FirstOrDefault();
                            totalpages = int.Parse(responsehttp.HttpResponseMessage.Headers.GetValues("totalpages").FirstOrDefault());
                        }
                    }

                    private int actualpage = 1;

                    private int totalpages;

                    private async Task selectedpage(int page)
                    {
                        actualpage = page;
                        await LoadData(actualpage);

                    }

                    private void shownew()
                    {
                        newProduct = new ProductDTO();
                        isnew = true;
                        isedit = false;
                        id = 0;

                    }


                    void showedit(ProductDTO product)
                    {
                        id = product.Id;
                        newProduct = Products.Where(x => x.Id == id).FirstOrDefault();
                        Console.WriteLine("el id es:" + id);
                    }



                    private async Task AddServiceProvider()
                    {


                        isnew = false;


                        var httpResponse = await repository.Post("api/Productos", newProduct);
                        if (httpResponse.Error)
                        {
                            var body = await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
                            toastService.ShowError(body, "Error!");
                        }
                        else
                        {
                            Products.Add(newProduct);

                            id = 0;
                            newProduct = null;

                            toastService.ShowSuccess("Record created successfully", "Congratulations!");
                            await LoadData(actualpage);
                        }



                    }

                    async Task EditServiceProvider()
                    {
                        var httpResponse = await repository.Put("api/Productos", newProduct);

                        if (httpResponse.Error)
                        {
                            var body = await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
                            toastService.ShowError(body, "Error!");
                        }
                        else
                        {

                            var indexOf = Products.IndexOf(Products.Find(p => p.Id == newProduct.Id));
                            Products[indexOf] = newProduct;
                            id = 0;
                            newProduct = null;

                            toastService.ShowSuccess("Record edited successfully", "Congratulations!");
                        }



                    } 
    }
