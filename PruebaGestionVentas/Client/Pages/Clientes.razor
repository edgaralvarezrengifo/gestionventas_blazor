@page "/clientes"

@inject IRepository repository
@inject IToastService toastService

<div>
    <h3>Clientes</h3>
    <ClientList Clients="Clients" OnValidSubmit="showedit" />
    <div class="col-md-3" style="padding-left:0px;">
        <Pagination ActualPage="actualpage" TotalPages="totalpages" SelectedPage="selectedpage" />
    </div>
</div>



@if (isnew && id == 0)
{
    <br />
    <ClientForm OnValidSubmit="AddServiceProvider" newClient="newClient" option="Create"></ClientForm> 
}

else
{
    <button class="btn btn-outline-info" @onclick="shownew">Add Cliente</button>
}

@if (id != 0)
{
    <br />
    <ClientForm OnValidSubmit="EditServiceProvider" newClient="newClient" option="Edit"></ClientForm>
}



@code { private bool isnew;

            private bool isedit;

            int id = 0;
            private ClientDTO newClient = new ClientDTO();
            private List<ClientDTO> Clients;

            protected async override Task OnInitializedAsync()
            {

                await LoadData(1);
                isnew = false;
                isedit = false;
            }

            private async Task LoadData(int page)
            {

                var responsehttp = await repository.Get<List<ClientDTO>>($"api/Clientes?page={page}");
                if (!responsehttp.Error)
                {
                    Clients = responsehttp.Response;
                    var count = responsehttp.HttpResponseMessage.Headers.GetValues("countrecords").FirstOrDefault();
                    totalpages = int.Parse(responsehttp.HttpResponseMessage.Headers.GetValues("totalpages").FirstOrDefault());
                }
            }

            private int actualpage = 1;

            private int totalpages;

            private async Task selectedpage(int page)
            {
                actualpage = page;
                await LoadData(actualpage);

            }

            void shownew()
            {
                newClient = new ClientDTO();
                isnew = true;
                isedit = false;
                id = 0;

            }


            void showedit(ClientDTO client)
            {
                id = client.Id;
                newClient = Clients.Where(x => x.Id == id).FirstOrDefault();
                Console.WriteLine("el id es:" + id);
            }



            private async Task AddServiceProvider()
            {


                isnew = false;


                var httpResponse = await repository.Post("api/Clientes", newClient);
                if (httpResponse.Error)
                {
                    var body = await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
                    toastService.ShowError(body, "Error!");
                }
                else
                {
                    Clients.Add(newClient);

                    id = 0;
                    newClient = null;

                    toastService.ShowSuccess("Se ha creado el cliente correctamente", "Exito!");
                    await LoadData(actualpage);
                }



            }

            async Task EditServiceProvider()
            {
                var httpResponse = await repository.Put("api/Clientes", newClient);

                if (httpResponse.Error)
                {
                    var body = await httpResponse.HttpResponseMessage.Content.ReadAsStringAsync();
                    toastService.ShowError(body, "Error!");
                }
                else
                {

                    var indexOf = Clients.IndexOf(Clients.Find(p => p.Id == newClient.Id));
                    Clients[indexOf] = newClient;
                    id = 0;
                    newClient = null;

                    toastService.ShowSuccess("Se ha editado el cliente correctamente", "Exito!");
                }



            } }
